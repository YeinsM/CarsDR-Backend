# .github/workflows/track-merged-branches.yml
name: Track Merged Branches

on:
  pull_request:
    types: [closed]

permissions:
  contents: write
  pull-requests: write

jobs:
  update-md:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get most recent merged-branches.md content
        run: |
          echo "üîç Looking for the most recent version of merged-branches.md..."
          
          # First check if update branch exists and get its content
          if git ls-remote --heads origin update/merged-branches | grep -q update/merged-branches; then
            echo "üì¶ Found existing update/merged-branches branch, fetching its content..."
            git fetch origin update/merged-branches
            
            # Get the file from the update branch if it exists there
            if git show origin/update/merged-branches:merged-branches.md > /tmp/update-merged-branches.md 2>/dev/null; then
              echo "üìÑ Using merged-branches.md from update branch (most recent)"
              cp /tmp/update-merged-branches.md merged-branches.md
            else
              echo "üìÑ No merged-branches.md in update branch, using base branch version"
            fi
          else
            echo "üìÑ No update branch exists, using base branch version"
          fi
          
          # Show what we're starting with
          if [ -f "merged-branches.md" ]; then
            echo "üîç Starting with this content:"
            cat merged-branches.md
          else
            echo "üìÑ No merged-branches.md file exists yet"
          fi

      - name: ‚úÖ Repo checked out
        run: echo "‚úÖ Repository successfully checked out."

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          echo "‚úÖ Git user configured."

      - name: Update merged-branches.md
        run: |
          echo "üöÄ Starting merged-branches.md update..."
          FILE="merged-branches.md"
          BRANCH_NAME="${{ github.head_ref }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"

          echo "üîÄ Current branch: $BRANCH_NAME"
          echo "üóíÔ∏è PR title: $PR_TITLE"
          echo "üî¢ PR number: $PR_NUMBER"

          # Skip if this is the update branch itself
          if [ "$BRANCH_NAME" = "update/merged-branches" ]; then
            echo "‚è≠Ô∏è Skipping logging for the update branch itself."
            exit 0
          fi

          # Generate new entry
          MERGE_DATE=$(date "+%Y/%m/%d")
          MERGE_TIME=$(date "+%H:%M")
          NEW_ENTRY="[$MERGE_TIME] - $BRANCH_NAME ‚Äî $PR_TITLE (PR #$PR_NUMBER)"

          echo "üìù New entry: $NEW_ENTRY"

          # Create or update the file
          if [ ! -f "$FILE" ]; then
            echo "üìÑ Creating new $FILE"
            cat > "$FILE" << EOF
          # Merged Branches History

          ## Last
          ---------------------------
          Merged on $MERGE_DATE
          $NEW_ENTRY

          ## Previous
          ---------------------------
          EOF
          else
            echo "üìÑ Updating existing $FILE"
            
            # Show current file content for debugging
            echo "üîç Current file content:"
            cat "$FILE"
            echo "üîç ==============================================="
            
            # Extract current Last section content (everything between "## Last" and "## Previous")
            # This includes the "Merged on" line and the actual entry
            CURRENT_LAST=$(awk '/^## Last/,/^## Previous/ {
              if ($0 ~ /^## Previous/) exit;
              if ($0 !~ /^## Last/ && $0 !~ /^--*$/) print $0
            }' "$FILE")

            # Extract Previous section content (everything after "## Previous", excluding the line separator)
            CURRENT_PREVIOUS=$(awk '/^## Previous/,EOF {
              if ($0 !~ /^## Previous/ && $0 !~ /^--*$/) print $0
            }' "$FILE")

            echo "üîç Debug - Current Last content:"
            echo "<<<LAST_START>>>"
            echo "$CURRENT_LAST"
            echo "<<<LAST_END>>>"
            echo "üîç Debug - Current Previous content:"
            echo "<<<PREVIOUS_START>>>"
            echo "$CURRENT_PREVIOUS"
            echo "<<<PREVIOUS_END>>>"

            # Create updated file with new structure
            {
              echo "# Merged Branches History"
              echo ""
              echo "## Last"
              echo "---------------------------"
              echo "Merged on $MERGE_DATE"
              echo "$NEW_ENTRY"
              echo ""
              echo "## Previous"
              echo "---------------------------"
              
              # Add previous Last content to Previous section first (what used to be in Last)
              if [ -n "$CURRENT_LAST" ] && [ "$CURRENT_LAST" != "" ]; then
                echo "$CURRENT_LAST"
                # Add separator line if there's also previous content
                if [ -n "$CURRENT_PREVIOUS" ] && [ "$CURRENT_PREVIOUS" != "" ]; then
                  echo ""
                fi
              fi

              # Add existing Previous content below (what was already in Previous)
              if [ -n "$CURRENT_PREVIOUS" ] && [ "$CURRENT_PREVIOUS" != "" ]; then
                echo "$CURRENT_PREVIOUS"
              fi
            } > "$FILE"
          fi

          echo "‚úÖ merged-branches.md updated successfully."
          echo "üìÑ Final content:"
          cat "$FILE"

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet merged-branches.md; then
            echo "No changes detected in merged-branches.md"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in merged-branches.md"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create or update Pull Request
        if: steps.check_changes.outputs.has_changes == 'true'
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "üìù Update merged-branches.md after merging PR #${{ github.event.pull_request.number }}"
          branch: update/merged-branches
          base: ${{ github.event.pull_request.base.ref }}
          title: "chore: update merged-branches.md with latest merge"
          body: |
            ü§ñ **Automated Update**
            
            This PR updates `merged-branches.md` with the latest merged branch information.
            
            **Merged Branch:** `${{ github.head_ref }}`
            **PR Title:** ${{ github.event.pull_request.title }}
            **PR Number:** #${{ github.event.pull_request.number }}
            
            This PR will be automatically created after each merge to keep track of all merged branches.
            
            ---
            ü§ñ This PR will be auto-merged to avoid conflicts with subsequent merges.
          delete-branch: true
          assignees: ${{ github.event.pull_request.user.login }}

      - name: Auto-merge the update PR
        if: steps.check_changes.outputs.has_changes == 'true' && steps.create_pr.outputs.pull-request-number
        run: |
          PR_NUMBER=${{ steps.create_pr.outputs.pull-request-number }}
          echo "üîÑ Auto-merging PR #$PR_NUMBER..."
          
          # Wait a moment for the PR to be fully created
          sleep 5
          
          # Merge the PR automatically
          curl -X PUT \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge" \
            -d '{
              "commit_title": "üìù Auto-merge: Update merged-branches.md",
              "commit_message": "Automatically merged branch tracking update to prevent conflicts",
              "merge_method": "squash"
            }'
          
          echo "‚úÖ PR #$PR_NUMBER auto-merged successfully"

      - name: ‚úÖ Workflow complete
        run: |
          if [ "${{ steps.check_changes.outputs.has_changes }}" = "true" ]; then
            echo "‚úÖ Pull request created/updated for merged-branches.md"
          else
            echo "‚úÖ No changes needed for merged-branches.md"
          fi
